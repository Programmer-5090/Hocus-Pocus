[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "hocus-pocus"
version = "1.0.0"
authors = [
    {name = "Programmer-5090"},
]
description = "Real-time audio identification system inspired by Shazam"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "audio",
    "fingerprinting", 
    "music",
    "identification",
    "shazam",
    "sound",
    "recognition",
    "dsp",
    "spectrogram",
    "fft"
]

dependencies = [
    "numpy>=1.19.0",
    "matplotlib>=3.3.0",
    "pyaudio>=0.2.11",
    "scipy>=1.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
    "isort>=5.0",
    "pre-commit>=2.15",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.17",
]
visualization = [
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]
performance = [
    "numba>=0.50.0",
    "cython>=0.29.0",
]

[project.urls]
Homepage = "https://github.com/Programmer-5090/hocus-pocus"
Documentation = "https://hocus-pocus.readthedocs.io/"
Repository = "https://github.com/Programmer-5090/hocus-pocus.git"
"Bug Tracker" = "https://github.com/Programmer-5090/hocus-pocus/issues"
Changelog = "https://github.com/Programmer-5090/hocus-pocus/blob/main/CHANGELOG.md"

[project.scripts]
hocus-pocus = "main:main"
hocus-analyze = "tools.analyze_database:main"
hocus-optimize = "tools.optimize_database:main"

[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
namespaces = false

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyaudio.*",
    "scipy.*",
    "matplotlib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "audio: marks tests that require audio processing",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".eggs",
    "*.egg",
    ".venv",
    ".tox",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]

[tool.vulture]
exclude = ["docs/", "tests/"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["request", "args", "kwargs"]
make_whitelist = true
min_confidence = 60
paths = ["src/", "main.py", "config.py"]
sort_by_size = true
verbose = false

# Audio processing configuration
[tool.hocus-pocus.audio]
default_sample_rate = 22050
fft_size = 2048
hop_length = 512
db_floor = -80

[tool.hocus-pocus.fingerprinting]
fan_value = 5
target_zone_min = 1
target_zone_max = 20

[tool.hocus-pocus.database]
enable_wal_mode = true
batch_size_fingerprints = 1000
optimization_threshold = 10000

[tool.hocus-pocus.performance]
max_query_duration = 30.0
max_parallel_uploads = 4
chunk_size = 8192
